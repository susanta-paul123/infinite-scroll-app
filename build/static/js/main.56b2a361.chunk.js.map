{"version":3,"sources":["assets/winters.jpg","getdata.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetData","page","a","fetch","json","userData","results","App","useState","data","setData","setPage","loader","setLoader","useEffect","newUser","prev","loadUser","console","log","className","onScroll","event","currentTarget","scrollTop","clientHeight","scrollHeight","Container","Row","Col","sm","map","udata","i","md","lg","key","style","marginBottom","src","require","alt","name","first","last","class","aria-hidden","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,qC,iKCY5BC,EAVF,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEAGFC,MAAM,mCAAD,OAAoCF,EAApC,gBAHH,8BAIVG,OAJU,cAENC,EAFM,yBAOLA,EAASC,SAPJ,2CAAH,sDCwFEC,MAnFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGSF,mBAAS,GAHlB,mBAGRP,EAHQ,KAGFU,EAHE,OAIeH,oBAAS,GAJxB,mBAINI,EAJM,KAIEC,EAJF,KAwCb,OAjBAC,qBAAU,YACI,uCAAG,4BAAAZ,EAAA,6DACfW,GAAU,GADK,SAEOb,EAAQC,GAFf,OAETc,EAFS,OAGfL,GAAQ,SAACM,GAAD,4BAAYA,GAAZ,YAAqBD,OAC7BF,GAAU,GAJK,2CAAH,qDAOdI,KAEE,CAAChB,IAKHiB,QAAQC,IAAIV,GAGV,yBAAKW,UAAU,MAAMC,SAlCJ,SAACC,GAAS,IAAD,EAEsBA,EAAMC,cAA/CC,EAFmB,EAEnBA,UAAWC,EAFQ,EAERA,aAAcC,EAFN,EAEMA,aAEhCR,QAAQC,IAAI,YAAaK,GACzBN,QAAQC,IAAI,eAAgBM,GAC5BP,QAAQC,IAAI,eAAgBO,GAEzBA,EAAeF,IAAaC,GAC3Bd,GAAQ,SAAAK,GAAI,OAAIA,EAAK,OA0BrB,kBAACW,EAAA,EAAD,CAAWP,UAAU,QACrB,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,wBAAIV,UAAU,wCAAd,qBAGH,kBAACQ,EAAA,EAAD,KACInB,EAAKsB,KAAI,SAACC,EAAOC,GAAR,OAGE,kBAACJ,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,EAAGC,IAAKH,EAAGI,MAAO,CAACC,aAAa,SAC5C,yBAAKlB,UAAU,uBACb,yBAAKA,UAAU,0BACb,yBAAKmB,IAAKC,EAAQ,IAAyBC,IAAI,GAAGrB,UAAU,eAE9D,yBAAKA,UAAU,OACf,wBAAIA,UAAU,oBAAoBY,EAAMU,KAAKC,MAA7C,IAAqDX,EAAMU,KAAKE,MAChE,uBAAGxB,UAAU,uBAAb,8DACA,yBAAKA,UAAU,qDACb,uBAAGA,UAAU,aAAY,uBAAGyB,MAAM,YAAYC,cAAY,SAA1D,QACA,4BAAQ1B,UAAU,oCAAmC,uBAAGyB,MAAM,gBAAgBC,cAAY,kBAU/GlC,GAAU,yBAAKQ,UAAU,eACxB,yBAAKA,UAAU,+BAA+B2B,KAAK,UACjD,0BAAM3B,UAAU,WAAhB,mBCrEM4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.56b2a361.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/winters.8d291760.jpg\";","import React, {useState, useEffect} from 'react';\r\n\r\nconst GetData = async page =>{\r\n\r\n    const userData = await (\r\n        await fetch(`https://randomuser.me/api/?page=${page}&results=30`)\r\n    ).json()\r\n   \r\n\r\n    return userData.results\r\n}\r\n\r\nexport default GetData;","import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Row, Col, Container } from 'reactstrap';\nimport GetData from './getdata'\n\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  let [page, setPage] = useState(1)\n  const [loader, setLoader] = useState(false);\n\n\n  const handelScroll=(event)=>{\n\n    const {scrollTop, clientHeight, scrollHeight} = event.currentTarget;\n    \n    console.log(\"scrollTop\", scrollTop)\n    console.log(\"clientHeight\", clientHeight)\n    console.log(\"scrollHeight\", scrollHeight)\n\n    if(scrollHeight - scrollTop ===clientHeight){\n        setPage(prev => prev+1)\n    }\n\n}\n\n\n\n  useEffect(() =>{\n  const loadUser = async() =>{\n    setLoader(true)\n    const newUser = await GetData(page)\n    setData((prev)=>[...prev, ...newUser])\n    setLoader(false)\n\n  }\n  loadUser()\n\n  },[page])\n\n\n\n\n  console.log(data)\n\n  return (\n    <div className=\"App\" onScroll={handelScroll}>\n        <Container className=\"py-5\">\n        <Row>\n          <Col sm=\"12\">\n            <h2 className=\"mb-4 font-weight-bold text-secondary\">Infinite Scroll</h2>\n          </Col>\n        </Row>\n         <Row>\n            {data.map((udata, i) => \n                    \n                    (\n                        <Col md={6} lg={4} key={i} style={{marginBottom:\"30px\"}}>  \n                            <div className=\"box overflow-hidden\">\n                              <div className=\"figure overflow-hidden\">\n                                <img src={require('./assets/winters.jpg')} alt=\"\" className=\"img-fluid\"/>\n                              </div>\n                              <div className=\"p-3\">\n                              <h5 className=\"font-weight-bold\">{udata.name.first} {udata.name.last}</h5>\n                              <p className=\"text text-secondary\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. </p>\n                              <div className=\"d-flex justify-content-between align-items-center\">\n                                <p className=\"m-0 price\"><i class=\"fa fa-inr\" aria-hidden=\"true\"></i> 100</p>\n                                <button className=\"btn btn-primary-outline p-0 wish\"><i class=\"fa fa-heart-o\" aria-hidden=\"true\"></i></button>\n                              </div>\n                              </div>\n                             \n                            </div> \n                        </Col>\n                    )\n                )}\n            \n          </Row>\n          {loader && <div className=\"loader py-5\">\n            <div className=\"spinner-border text-success \" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div> }\n        </Container>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}